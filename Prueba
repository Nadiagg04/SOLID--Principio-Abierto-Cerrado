from abc import ABC, abstractmethod

class Operacion(ABC):
  @abstractmethod
  def operar(self, a, b):
    pass

class Sumar(Operacion):
  def operar(self, a, b):
    return a + b

class Restar(Operacion):
  def operar(self, a, b):
    return a - b

class Multiplicar(Operacion):
    def operar(self, a, b):
      return a * b

class Dividir(Operacion):
    def operar(self, a, b):
      if b == 0:
        raise ValueError ( "Error, introduzca un número divisor que no sea 0")
      return a / b

class Calculadora:
   def __init__(self):
      self.operaciones = {}

def crear_operaciones(self, nombre , operacion):
      self.operaciones[nombre] = operacion

def calculacion(self, nombre, a, b):
  if nombre not in self.operaciones:
    raise ValueError(f"Operación '{nombre}' no encontrada.")
  operacion = self.operaciones[nombre]
  return operacion.ejecutar(a,b)
